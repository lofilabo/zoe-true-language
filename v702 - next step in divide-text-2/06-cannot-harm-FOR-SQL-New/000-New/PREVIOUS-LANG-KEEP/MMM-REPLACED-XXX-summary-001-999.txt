001	001.zoe

oh look !
  CAN HAS STDIO?
  pencil "but Doctor..."
I see !

---------------------------------------------------------------------------------------------------


002	002_var.zoe

oh look ! 

	I define var1 = 234
	I define var2 = 5.67
	I define var3 = ".  There! And There Again!!"
	var1 <=== var1
	var2 <=== var2
	var3 <=== var3
	pencil var1 var2 var3

I see !

---------------------------------------------------------------------------------------------------

003 	003-numbers.zoe

oh look !
  CAN HAS STDIO?

	^.^ a note

	^.^{
		another note!
		on many lines!!
	}^.^

	I define my_num1 = 3
	^.^ pencil my_num1

	I define my_num2 = 7.7
	^.^ pencil my_num2

	I define my_num = "hello"
	^.^ pencil my_num 

	I define  VAR_A = 5
	I define  VAR_B = 3
	I define  VAR_C = 0

	VAR_C <=== zoe_+ VAR_A zoe_do_maths_with VAR_B
	pencil VAR_C

	VAR_C <=== zoe_+ my_num1 zoe_do_maths_with my_num2
	pencil VAR_C

I see !

---------------------------------------------------------------------------------------------------


004	004-plus_minus_etc.zoe

oh look !
  CAN HAS STDIO?



^.^{
	Nothing but a note
  	pencil "but Doctor..."
}^.^







	I define my_numZ = 0
	^.^	pencil my_numZ

	I define my_num1 = 4
	^.^	pencil my_num1

	I define my_num2 = 2
	^.^	pencil my_num2

	my_numZ <=== zoe_+ my_num1 zoe_do_maths_with my_num2
	pencil my_numZ

	my_numZ <=== zoe_- my_num1 zoe_do_maths_with my_num2
	pencil my_numZ

	my_numZ <=== zoe_* my_num1 zoe_do_maths_with my_num2
	pencil my_numZ

	my_numZ <=== zoe_/ my_num1 zoe_do_maths_with my_num2
	pencil my_numZ

I see !

---------------------------------------------------------------------------------------------------


005	005-modulo-etc.zoe

oh look !

^.^{

  CAN HAS STDIO?
  pencil "but Doctor..."




	Nothing but a note
  	pencil "but Doctor..."
}^.^







	I define my_num1 = 10
	I define my_num2 = 4
	I define my_numZ = 0


	
	my_numZ <=== zoe_% my_num1 zoe_do_maths_with my_num2
	pencil my_numZ

	my_numZ <=== zoe_>>> my_num1 zoe_do_maths_with my_num2
	pencil my_numZ

	my_numZ <=== zoe_<<< my_num1 zoe_do_maths_with my_num2
	pencil my_numZ


I see !

---------------------------------------------------------------------------------------------------


006	006-boolean.zoe

oh look !


^.^ We define these 3 of Type boolean
I define my_bool1 =oftype==> zoe_boolean
I define my_bool2 =oftype==> zoe_boolean
I define my_boolZ =oftype==> zoe_boolean

my_bool1 <=== "True"
my_bool2 <=== "False"
pencil my_bool1

I see !

---------------------------------------------------------------------------------------------------


007	007-function01.zoe

oh look !

	function I myFunction zoe_pass_this arriving_value
		pencil arriving_value
	end_of_function


	function I myFunctionTwo zoe_pass_this arriving_value zoe_and_this second_value zoe_and_this third_value
		pencil arriving_value

		pencil toysoldiers "3 Values" ":->" arriving_value "; " second_value "; " third_value zoe_call_now
	zoe_return_from_function "I Came Back"
	end_of_function

	I define retVal  =oftype==> zoe_string

 	I wish_to_call myFunction zoe_pass_this 1  zoe_call_now
^.^     Instruction    Name of func    Instruction   Val Instruction
	I wish_to_call myFunction zoe_pass_this "765" zoe_call_now
	I wish_to_call myFunction zoe_pass_this "blubble" zoe_call_now
	retVal <=== I wish_to_call myFunctionTwo zoe_pass_this 44.4 zoe_and_this 333 zoe_and_this "Jamie!" zoe_call_now

^.^	VISIBLE  SMOOSH  VAR1           " "   VAR3   MKAY
	pencil toysoldiers "returned vale" ":->" retVal zoe_call_now

I see !

---------------------------------------------------------------------------------------------------


008	008-function02--NOT-YET-TOUCHED.zoe

oh look !
pencil "To Be Completed.  No Problems Inside!!"

I see !

---------------------------------------------------------------------------------------------------


009	009-if_then_else.zoe

oh look !


pencil "======================================================"
pencil "let's start...."

I define var1 = "letterUP"
I define var2 = "letterUP"
I define var3 = "letterDOWN"
I define var4 = "letterMIDDLE"
I define var5 = "letterOUTTHERE"

pencil "------------------------------------------------------"
pencil "Step 1:"
^.^ This should pass
zoe_same var1 zoe_do_maths_with var2
zoe_match?
	zoe_pass
		pencil "You Passed!"
	zoe_fail
		pencil "You Failed!"
zoe_oh_I_see


pencil "------------------------------------------------------"
pencil "Step 2:"
^.^ This should fail
zoe_same var1 zoe_do_maths_with var3
zoe_match?
	zoe_pass
		pencil "You Passed!"
	zoe_fail
		pencil "You Failed!"
zoe_oh_I_see



pencil "------------------------------------------------------"
^.^ This can pass (3 times!) and fail once.
pencil "Step 3:"
zoe_same var1 zoe_do_maths_with var2
zoe_match?
	zoe_pass
		pencil "You Passed Stage 1"

	zoe_else zoe_same var1 zoe_do_maths_with var4
		pencil "You Passed Stage 2"

	zoe_else zoe_same var1 zoe_do_maths_with var5
		pencil "You Passed Stage 3"

	zoe_fail
		pencil "You Failed."
zoe_oh_I_see


pencil "======================================================"

I see !


---------------------------------------------------------------------------------------------------


010	010-loop.zoe

oh look !
  CAN HAS STDIO?
  pencil "but Doctor..."

^.^Loop!!

	I define trackingVar = 0
	I define printingValue = 0
		zoe_loop_begin loopy zoe_inthis zoe_pass_this trackingVar zoe_until zoe_same trackingVar zoe_do_maths_with 3
			pencil printingValue			
			printingValue <=== zoe_+ trackingVar zoe_do_maths_with 1
			^.^pencil "but Doctor..."
		zoe_loop_end loopy

	pencil "--------"

	trackingVar <=== 2
		zoe_loop_begin loopy zoe_inthis zoe_pass_this trackingVar zoe_until zoe_same trackingVar zoe_do_maths_with 7
			pencil trackingVar	
		zoe_loop_end loopy

I see !

---------------------------------------------------------------------------------------------------


011	011-loop2.zoe

oh look !
pencil "There is nothing here yet. No Problems ^.^"

I see 

---------------------------------------------------------------------------------------------------


012	012-loop3.zoe	

oh look !

^.^{

---Infinite loops---

Important!
This loop loops on for ever,
unless steped out by calling GTFO

Maybe this is the best ^^
like:
for(;;){
	/* here */
}

}^.^

I define trackingVar = 0

zoe_loop_begin loop_label
	pencil trackingVar
	trackingVar <=== zoe_+ trackingVar zoe_do_maths_with 1

	zoe_same trackingVar zoe_do_maths_with 7
		zoe_match?
		^.^ NEXT: Use BIGGROF: https://gist.github.com/sharmaeklavya2/8a0e2581baf969be0f64
		zoe_pass
		pencil "You exit!"
		zoe_exit
	zoe_oh_I_see

zoe_loop_end loop_label

I see !

---------------------------------------------------------------------------------------------------


013	013-flow-control.zoe

oh look !

^.^{

I HAS A -> I define  as-in: I define COLOR = ""
VISIBLE -> pencil
OIC	-> zoe_oh_I_see
GTFO	-> zoe_exit

GIMMEH  -> zoe_pleaseInput 
WTF  	-> zoe_whichone  
OMG  	-> zoe_Isee
OMGWTF  -> zoe_ohIsee

}^.^

	I define COLOR = ""
	zoe_pleaseInput COLOR
	COLOR, zoe_whichone?
	    zoe_Isee "R"
		pencil "RED FISH"
		zoe_exit
	    zoe_Isee "Y"
		pencil "YELLOW FISH"
		^.^ BTW Since there is no `GTFO` the next statements will also be tested
	    zoe_Isee "G"
	    zoe_Isee "grr"
	    zoe_Isee "B"
		pencil "FISH HAS A FLAVOR"
		zoe_exit
	    zoe_ohIsee
	pencil "FISH IS TRANSPARENT OHNO WAT"
	zoe_oh_I_see



I see !

---------------------------------------------------------------------------------------------------


014	014-array-for-today.zoe

oh look !

^.^foo define var1 =oftype==> zoe_integer
I define foo =oftype==> zoe_array

foo define var1 = WIN
foo define var2 = FAIL
foo define var3 = -1
foo define var4 = 2
foo define var5 = -3.456
foo define var6 = 4.21
foo define var7 = "abc"

^.^ VISIBLE SUM OF 0 AN foo'Z var1
pencil zoe_+ 0 zoe_do_maths_with foo --arrMember--> var1
pencil zoe_* 2 zoe_do_maths_with foo --arrMember--> var4
pencil zoe_/ 8.42 zoe_do_maths_with foo --arrMember--> var6

^.^ VISIBLE foo'Z var7
pencil foo --arrMember--> var3
pencil foo --arrMember--> var4
pencil foo --arrMember--> var5
pencil foo --arrMember--> var6
pencil foo --arrMember--> var7

I see !

---------------------------------------------------------------------------------------------------


015	015-array-more.zoe

oh look !
  CAN HAS STDIO?
  pencil "but Doctor..."
I see !


016	016-join-strings.zoe

oh look !
  CAN HAS STDIO?

	I define VAR1 = "abc" 
	I define VAR2 = "def"
	I define VAR3 = toysoldiers VAR1 VAR2 zoe_do_maths_with VAR2 zoe_call_now	^.^ This is OK
	I define VAR4 = toysoldiers VAR1 VAR2 zoe_call_now				^.^ So is this
	I define VAR5 = toysoldiers VAR1 "<---->" VAR2 zoe_call_now				^.^ So is this
 
	pencil VAR3
	pencil VAR4
	pencil VAR5

I see !

---------------------------------------------------------------------------------------------------


017	017-insert-string.zoe

oh look !

	I define var
	I define anothervar

	anothervar <=== "FOUR"

	var <=== "Three, and then :{anothervar} ....and Five!"

	pencil var

	^.^{
		I HAS A var
		I HAS A anothervar
		anothervar R "FOUR"
		var R "THREE AND THEN :{anothervar} "

		VISIBLE var
	}^.^

I see !

---------------------------------------------------------------------------------------------------


018	018-COLLECT-INPUT.zoe

oh look !

	I define letter = ""
	zoe_pleaseInput letter
	letter, zoe_whichone?
	    zoe_Isee "a"
		pencil "You said a"
		zoe_exit ^.^ Exit!! Now!!

	    zoe_Isee "b"
		pencil "You said b"
		^.^ BTW Since there is no `zoe_exit` the next statements will also be tested
		^.^ Do Not Exit!! Pass-through the rest!!

		^.^ zoe_exit

	    zoe_Isee "A"
		pencil "You said A"
		^.^ zoe_exit

	    zoe_Isee "B"
		pencil "You said B"
		^.^ zoe_exit

	    zoe_ohIsee
		pencil "Oh! I see!!"

	zoe_oh_I_see
I see !


---------------------------------------------------------------------------------------------------


019	019-Unused.zoe

oh look !
  CAN HAS STDIO?
  pencil "but Doctor..."
I see !

---------------------------------------------------------------------------------------------------


301	301-TEST-C-FUNCTIONS.zoe

^.^{

ALL OF THEM are triggered here!

Developed via ../unacceptable/unacceptable01.zoe
Might still be there!
Just to let you know....

}^.^

oh look !
  CAN HAS MYLIB?
  CAN HAS STDIO?
	
^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLE1 YR "New Text Passed" MKAY
    ^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE1 zoe_pass_this "New Text Passed" zoe_call_now

    ^.^	pencil " "
    ^.^	pencil " "


^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZZ2 YR 41 AN YR 42 AN YR 43 MKAY
    ^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZ2 zoe_pass_this 41 zoe_and_this 42 zoe_and_this 43 zoe_call_now


^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZZ3 YR "id1,data1;id2,data2;id3,data3" AN YR ";" AN YR 1 MKAY


^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLE1 YR "New Text Passed" MKAY
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE1 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE2 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE3 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE4 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZ zoe_pass_this "New Text Passed" zoe_call_now

^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZ1 YR 11 AN YR 12 MKAY
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZ1 zoe_pass_this 111 zoe_and_this 122 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZ2 zoe_pass_this 211 zoe_and_this 222 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZ3 zoe_pass_this 311 zoe_and_this 322 zoe_call_now

^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZZbase YR 31 AN YR 32 AN YR 33 MKAY
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZbase zoe_pass_this 31 zoe_and_this 32 zoe_and_this 33 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZ1 zoe_pass_this 41 zoe_and_this 42 zoe_and_this 43 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZ2 zoe_pass_this 51 zoe_and_this 52 zoe_and_this 53 zoe_call_now

^.^ SPACE ... and NOSPACE... are OK.  But no SPACE after ...
^.^ You can put --- pencil --- at the beginning of the operation to show feedback, or leave it out.
^.^ The feedback will be in zoejamie.txt

^.^{

ISUNACCEPTABLEZZZ3 now changed to zoePassString1


}^.^

	I define uwar1 = ""
	I define uwar2 = ""
	I define uwar3 = ""

  	uwar1 <=== I wish_to_call MYLIB --arrMember--> zoePassString1...
	zoe_pass_this "id1,data1;id2,data2;id3,data3;"...
	zoe_and_this ";"...
	zoe_and_this 1 ...
	zoe_call_now

  	uwar2 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 ...
	zoe_pass_this "id1,data1;id2,data2;id3,data3;" ...
	zoe_and_this ";" ...
	zoe_and_this 0 ...
	zoe_call_now

	^.^ pencil uwar1 "<----->" uwar2
	pencil uwar1
	pencil uwar2
	
	^.^{
  	uwar3 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 ...
	zoe_pass_this uwar2...
	zoe_and_this ";" ...
	zoe_and_this 1 ...
	zoe_call_now

	pencil uwar3
	}^.^

I see !

---------------------------------------------------------------------------------------------------


401	401-storeData_1.zoe

oh look !
  CAN HAS MYLIB?
  CAN HAS STDIO?
	


	I define uwar1 = ""
	I define uwar2 = ""
	I define uwar3 = ""

  	uwar1 <=== I wish_to_call MYLIB --arrMember--> zoePassString1...
	zoe_pass_this "id1,data1;id2,data2;id3,data3;"...
	zoe_and_this ";"...
	zoe_and_this 1 ...
	zoe_call_now

  	uwar2 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 ...
	zoe_pass_this "id1,data1;id2,data2;id3,data3;" ...
	zoe_and_this ";" ...
	zoe_and_this 0 ...
	zoe_call_now

	^.^ pencil uwar1 "<----->" uwar2
	pencil uwar1
	pencil uwar2
	
	^.^{
  	uwar3 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 ...
	zoe_pass_this uwar2...
	zoe_and_this ";" ...
	zoe_and_this 1 ...
	zoe_call_now

	pencil uwar3
	}^.^

I see !

---------------------------------------------------------------------------------------------------


402	402-split-string-by-semicolon.zoe

^.^{

ALL OF THEM are triggered here!

Developed via ../unacceptable/unacceptable01.zoe
Might still be there!
Just to let you know....

}^.^




^.^{
HAI 1.4
  CAN HAS MYLIB?
  BTW somewhat verbose syntax, but easy to implement
  VISIBLE I IZ MYLIB'Z ISUNACCEPTABLE YR 3 MKAY
KTHXBYE


BTW Going INTO the server
VISIBLE I IZ MYLIB'Z ISUNACCEPTABLE1 YR "New Text Passed" MKAY
BTW visible is the things that shows the 'returned' message!
VISIBLE " "

}^.^

oh look !
  CAN HAS MYLIB?
  CAN HAS STDIO?
	
^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLE1 YR "New Text Passed" MKAY
    ^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE1 zoe_pass_this "New Text Passed" zoe_call_now

    ^.^	pencil " "
    ^.^	pencil " "


^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZZ2 YR 41 AN YR 42 AN YR 43 MKAY
    ^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZ2 zoe_pass_this 41 zoe_and_this 42 zoe_and_this 43 zoe_call_now


^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZZ3 YR "id1,data1;id2,data2;id3,data3" AN YR ";" AN YR 1 MKAY


^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLE1 YR "New Text Passed" MKAY
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE1 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE2 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE3 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLE4 zoe_pass_this "New Text Passed" zoe_call_now
^.^  	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZ zoe_pass_this "New Text Passed" zoe_call_now

^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZ1 YR 11 AN YR 12 MKAY
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZ1 zoe_pass_this 111 zoe_and_this 122 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZ2 zoe_pass_this 211 zoe_and_this 222 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZ3 zoe_pass_this 311 zoe_and_this 322 zoe_call_now

^.^	VISIBLE I IZ MYLIB'Z ISUNACCEPTABLEZZZbase YR 31 AN YR 32 AN YR 33 MKAY
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZbase zoe_pass_this 31 zoe_and_this 32 zoe_and_this 33 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZ1 zoe_pass_this 41 zoe_and_this 42 zoe_and_this 43 zoe_call_now
^.^	pencil I wish_to_call MYLIB --arrMember--> ISUNACCEPTABLEZZZ2 zoe_pass_this 51 zoe_and_this 52 zoe_and_this 53 zoe_call_now

^.^ SPACE ... and NOSPACE... are OK.  But no SPACE after ...
^.^ You can put --- pencil --- at the beginning of the operation to show feedback, or leave it out.
^.^ The feedback will be in zoejamie.txt

^.^{

ISUNACCEPTABLEZZZ3 now changed to zoePassString1


}^.^

	I define uwar1 = ""
	I define uwar2 = ""
	I define uwar3 = ""

  	uwar1 <=== I wish_to_call MYLIB --arrMember--> zoePassString1...
	zoe_pass_this "id1,data1;id2,data2;id3,data3;"...
	zoe_and_this ";"...
	zoe_and_this 1 ...
	zoe_call_now

  	uwar2 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 ...
	zoe_pass_this "id1,data1;id2,data2;id3,data3;" ...
	zoe_and_this ";" ...
	zoe_and_this 0 ...
	zoe_call_now

	^.^ pencil uwar1 "<----->" uwar2
	pencil uwar1
	pencil uwar2
	
	^.^{
  	uwar3 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 ...
	zoe_pass_this uwar2...
	zoe_and_this ";" ...
	zoe_and_this 1 ...
	zoe_call_now

	pencil uwar3
	}^.^

I see !

---------------------------------------------------------------------------------------------------


601	601-web-simple.zoe

oh look !

	CAN HAS STDIO?
	CAN HAS SOCKS?
	CAN HAS STRING?
	CAN HAS MYLIB?

^.^Fuction Goes Here

	pencil "Web 1!"

	I define sock
	sock <=== I wish_to_call SOCKS --arrMember--> BIND zoe_pass_this "127.0.0.1" zoe_and_this 13337 zoe_call_now

	zoe_loop_begin loop

		I define conn
		conn <=== I wish_to_call SOCKS --arrMember--> LISTN zoe_pass_this sock zoe_call_now
		I define cmd
		cmd  <=== I wish_to_call SOCKS --arrMember-->  GET zoe_pass_this sock zoe_and_this conn zoe_and_this 1024 zoe_call_now

		^.^  I define slotIn = "niggly naggly noo noo noo"
		  I define slotIn = cmd
		^.^  I HAS A slotIn ITZ I IZ parse YR cmd MKAY BTW <<<<we must prepare this next.  Use ___parse___ function
		
		pencil slotIn

		I define reply = ""
		
		reply <=== "HTTP/1.1 200 OK:3:) Server: httpd.lol/0.1 (lci):3:) Context-Type: text/html:3:) Content-Length: 19:3:):3:)hello there :{slotIn}:3:)"
		I wish_to_call SOCKS --arrMember--> PUT zoe_pass_this sock zoe_and_this conn zoe_and_this reply zoe_call_now
        	I wish_to_call SOCKS --arrMember--> CLOSE zoe_pass_this conn zoe_call_now

	zoe_loop_end loop
I see !


---------------------------------------------------------------------------------------------------


602	601-web-simple.zoe

oh look !

	CAN HAS STDIO?
	CAN HAS SOCKS?
	CAN HAS STRING?
	CAN HAS MYLIB?
	CAN HAS MYLIB?
	CAN HAS STDIO?

	I define sock
	sock <=== I wish_to_call SOCKS --arrMember--> BIND zoe_pass_this "127.0.0.1" zoe_and_this 13337 zoe_call_now


	^.^{
		THE REASON FOR CAPTURING TWICE 

		When a 'REQUEST' is made, there are 2 'calls', one after another.
		If we store the 'last request' re recieve, we will miss important 
		one ith this information:

			GET /prongle/grragh/8888888/hgfhgfhgf/%5E%5E%5E%5E HTTP/1.1
			Host: 127.0.0.1:13337
			Connection: keep-alive
			Cache-Control: max-age=0
			......
		
		If we store only the 'last' response we get, this will be overwritten.

		We get 2 and not 1 responses.

		i.
		Uncomment this:
		^.^ pencil slotIn
		to see them.

		ii.
		Store both of them in different vars.
		these are:
		uwarM  and
		uwarO

		We then look into uwarM to get what we want:
		GET /prongle/grragh/8888888/hgfhgfhgf/%5E%5E%5E%5E HTTP/1.1
		beween GET and HTTP....

		iii.
		Important to remember:
		Our ONE request results in TWO replies,
		of which the second will override the first if we 'just' roll the loop
		to pick up 'the reply'
	}^.^


	I define trackingVar = ""
	I define printingValue = ""
	I define uwar1 = ""
	I define uwar2 = ""
	I define uwar3 = ""
	I define uwar7 = ""
	I define uwarM = ""
	I define uwarO = ""
	I define s = 0


	zoe_loop_begin loop

		I define conn
		conn <=== I wish_to_call SOCKS --arrMember--> LISTN zoe_pass_this sock zoe_call_now
		I define cmd
		cmd  <=== I wish_to_call SOCKS --arrMember-->  GET zoe_pass_this sock zoe_and_this conn zoe_and_this 1024 zoe_call_now

		^.^  I define slotIn = "niggly naggly noo noo noo"

		I define slotIn = cmd
		
		^.^  I HAS A slotIn ITZ I IZ parse YR cmd MKAY BTW <<<<we must prepare this next.  Use ___parse___ function
		
		^.^ do not show everything if you don't want to.
		^.^ This shows on the Server Monitor - not the Browser!
		^.^ pencil slotIn 
		
		^.^ use this to see the string which is being looked at.
		^.^ pencil slotIn

		^.^ Experiment - try to cut off the first bit of the string     uwar7 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 zoe_pass_this slotIn zoe_and_this " " zoe_and_this 0 zoe_call_now
		uwar2 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 zoe_pass_this slotIn zoe_and_this "H" zoe_and_this 1 zoe_call_now
		^.^	DIVIDE THE STRING.  >>>> HTTP/1.1 <<<		Here we are using 'H' from HTTP/1.1 
		^.^	Can we do better?
		^.^	SPLITTING THE STRING 
		^.^	THIS BIT.
		^.^	D O    N O T   L E A V E    T H I S   A L O N E
		
		^.^ use this to see the string which is being looked at.
		^.^ pencil uwar2


		uwar3 <=== I wish_to_call MYLIB --arrMember--> zoePassString1 zoe_pass_this uwar2 zoe_and_this "/" zoe_and_this 0 zoe_call_now


			^.^ pencil slotIn  ^.^ EACH reply from the server.
			^.^ pencil uwar3
			^.^ pencil s
		
			^.^ Let's keep track of the 'reply' we are 'inside'
			^.^ s=0 -- first one	( uwarM )
			^.^ s=1 -- second one	( uwarO )


			^.^ if s = 1, we are in the 1st output.  
			zoe_same s zoe_do_maths_with 0
			zoe_match?
				zoe_pass
					^.^ pencil "You Passed Stage 1"
					uwarM <=== uwar3
					pencil uwarM
			zoe_oh_I_see

			^.^ if s = 1, we are in the 2nd output.  Today, we require nothing from here.
			zoe_same s zoe_do_maths_with 1
			zoe_match?
				zoe_pass
					^.^ pencil "You Passed Stage 1"
					uwarO <=== uwar3
					^.^ pencil uwarO ^.^we need
			zoe_oh_I_see

			^.^ if s = 1, we can 'reset'
			zoe_same s zoe_do_maths_with 1
			zoe_match?
				zoe_pass
					s <=== 0
			zoe_oh_I_see
		

		I define reply = ""
		^.^ OUTPUT 1 - to Browser
		^.^ Reply Type 1
		^.^ (we can look at everything)		
		^.^ reply <=== "HTTP/1.1 200 OK:3:) Server: httpd.lol/0.1 (lci):3:) Context-Type: text/html:3:) Content-Length: 19:3:):3:)hello there :{slotIn}:3:)"

		^.^ OUTPUT 2 - to Browser
		^.^ Reply type 2.
		^.^ what we trim from the above reciebed signals.
		^.^ (we see ONLY the web item name)

		^.^without HTML
		^.^ reply <=== "HTTP/1.1 200 OK:3:) Server: httpd.zoe/0.1 (lci):3:) Context-Type: text/html:3:) Content-Length: 19:3:):3:)Curren Call--> :{uwar3}:3:)"

		^.^with HTML
		reply <=== "HTTP/1.1 200 OK:3:) Server: httpd.zoe/0.1 (lci):3:) Context-Type: text/html:3:) Content-Length: 19:3:):3:)<html><body><h1>Curren Call</h1><img src=https://www.1010.or.jp/map/wp-content/uploads/2015/03/naminoyu-top-250x170.jpg><br/> :{uwar3}:3:)</body></html>"

		^.^ This is not our work - only the translation to zoe.

		I wish_to_call SOCKS --arrMember--> PUT zoe_pass_this sock zoe_and_this conn zoe_and_this reply zoe_call_now
        	I wish_to_call SOCKS --arrMember--> CLOSE zoe_pass_this conn zoe_call_now

		s <=== zoe_+ s zoe_do_maths_with 1

	zoe_loop_end loop
I see !

---------------------------------------------------------------------------------------------------


701	701-Text-Write-Basic.zoe

^.^{


"r"
"w"
"a"
"r+"
"w+"
"a+"


r: opens a text file in reading mode.
w: opens or creates a text file in writing mode.
a: opens a text file in append mode.
r+: opens a text file in both reading and writing mode. ...
w+: opens a text file in both reading and writing mode. ...
a+: opens a text file in both reading and appending mode.

}^.^
oh look !
	CAN HAS STDIO?
	I define writeFile = I wish_to_call STDIO --arrMember--> OPEN zoe_pass_this "read.txt" zoe_and_this "w" zoe_call_now
	I wish_to_call STDIO --arrMember--> SCRIBBEL zoe_pass_this writeFile zoe_and_this "Bipple!" zoe_call_now
	I wish_to_call STDIO --arrMember--> CLOSE zoe_pass_this writeFile zoe_call_now

I see !


---------------------------------------------------------------------------------------------------


702	702-Text-Read-Basic.zoe

oh look !
	CAN HAS STDIO?
	I define readFile = I wish_to_call STDIO --arrMember--> OPEN zoe_pass_this "read.txt" zoe_and_this "r" zoe_call_now
	I wish_to_call STDIO --arrMember--> DIAF zoe_pass_this readFile zoe_call_now 
	I define contents = I wish_to_call STDIO --arrMember-->  LUK zoe_pass_this readFile zoe_and_this 1024 zoe_call_now
	pencil contents
I see !





